{"version":3,"sources":["MegaPointItem.tsx","RatingNumber.tsx","RatingItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MegaPointItem","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","concat","colour","src","photo","name","score","React","Component","RatingNumber","number","RatingItem","ratings","sort","b","map","r","i","RatingNumber_RatingNumber","key","averageRating","rs","arr","reduce","p","c","length","sortGame","avgA","avgB","weightedA","App","items","people","MegaPointItem_MegaPointItem","gameItems","games","g","RatingItem_RatingItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe6ee0fa.chunk.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport React from 'react';\n\ninterface MegaPointsItemProps {\n    name: String,\n    score: Number,\n    colour: String,\n    photo: any\n}\n\nexport default class MegaPointItem extends React.Component<MegaPointsItemProps, any> {\n  constructor(props: MegaPointsItemProps) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className={`idv-mega-points ${this.props.colour}`}>\n        <div className=\"idv-name\">\n            <img src={this.props.photo} className=\"person-icon\"/>\n            <h3>{this.props.name}</h3>\n        </div>\n        <div className=\"idv-points\"><p>{this.props.score}</p></div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\ninterface RatingNumberProps {\n    number: Number,\n    colour: String\n}\n\nexport default class RatingNumber extends React.Component<RatingNumberProps, any> {\n\n  constructor(props: RatingNumberProps) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <li className={`${this.props.colour}`}>{this.props.number}</li>\n    );\n  }\n}\n","import React from 'react';\nimport RatingNumber from './RatingNumber'\n\ninterface RatingItemProps {\n    name: String,\n    ratings: any[]\n}\n\nexport default class RatingItem extends React.Component<RatingItemProps, any> {\n\n  constructor(props: RatingItemProps) {\n    super(props);\n  }\n\n  render() {\n\n    var ratings = this.props.ratings.sort((a, b) => {\n      if(a.colour < b.colour) { return -1; }\n      if(a.colour > b.colour) { return 1; }\n      return 0;\n    }).map((r, i) => (<RatingNumber key={i} number={r.number} colour={r.colour} />))\n\n    return (\n      <li>\n        <ul className=\"ratings-numbers\">\n          {ratings}\n        </ul>\n        {this.props.name}\n      </li>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MegaPointItem from './MegaPointItem'\nimport RatingItem from './RatingItem'\n\nimport elliot from './elliot.jpg';\nimport lottie from './lottie.jpg';\nimport nathan from './nathan.jpg';\nimport zoe from './zoe.jpg';\n\nimport games from './games.json';\nimport people from './people.json';\n\nconst average = (arr: any) => arr.reduce((p: any, c: any) => p + c, 0 ) / arr.length;\nconst averageRating = (rs: any) => average(rs.map((r: any) => r.number))\nconst sortGame = (a: any, b: any) => {\n  const avgA = averageRating(a.ratings)\n  const avgB = averageRating(b.ratings)\n  const weightedA = avgA * 4 + a.ratings.length\n  const weightedB = avgB * 4 + b.ratings.length\n\n  return weightedB - weightedA\n}\n\n\nclass App extends Component {\n  render() {\n\n    var items = people.sort((a, b) => -(a.score - b.score)).map((p, i) => (\n          <MegaPointItem name={p.name} score={p.score} colour={p.colour} photo={p.photo} key={i} />\n    ))\n\n    var gameItems: any[] = games.sort(sortGame).map((g, i) => (\n      <RatingItem key={i} name={g.name} ratings={g.ratings} />\n    ))\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Casa Sin Nombre</h1>\n        </header>\n        <main className=\"wrapper columns\">\n          <div className=\"mega-points column\">\n            <h2>Leaderboard</h2>\n            {items}\n          </div>\n          <div className=\"ratings column\">\n            <h2>Ratings</h2>\n            <ol className=\"rating-items\">\n              {gameItems}\n            </ol>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}